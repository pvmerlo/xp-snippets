{
  "contentLib.addAttachment(params)": {
    "description": "Adds an attachment to an existing content",
    "prefix": ["contentLib.addAttachment(params)", "addAttachment"],
    "body": [
      "/*",
      " Adds an attachment.",
      " Ref: https://developer.enonic.com/docs/xp/stable/api/lib-content#addattachment",
      "*/",
      "contentLib.addAttachment({",
      "    key: ${1:'/mySite/mycontent'},",
      "    name: ${2:'image'},",
      "    mimeType: ${3:'image/png'},",
      "    label: ${4:'photo'},",
      "    data: ${5:dataStream}",
      "});"
    ]
  },
  "contentLib.create(params)": {
    "description": "This function creates a content",
    "prefix": ["contentLib.create(params)", "create"],
    "body": [
      "/*",
      " Creates a content.",
      " https://developer.enonic.com/docs/xp/stable/api/lib-content#create",
      "*/",
      "var result = contentLib.create({",
      "    name: '${1:mycontent}',",
      "    parentPath: ${2:'/a/b'},",
      "    displayName: ${3:'My Content'},",
      "    contentType: ${4:app.name} + ${5:':myContentType'},",
      "    language: ${6:'en'},",
      "    data: ${6:contentData},",
      "    x: ${7:contentXData},",
      "    attachments: ${8:attachments},",
      "    publish: ${9:publish}",
      "});"
    ]
  },
  "contentLib.createWithHandler(params)": {
    "description": "This function tries to creates a content",
    "prefix": [
      "contentLib.createWithHandler(params)",
      "createWithHandler",
      "tryCreate"
    ],
    "body": [
      "/**",
      " * Check if content already exists.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#create",
      " */ ",
      "try {",
      "    var result = contentLib.create({",
      "        name: ${1:'mycontent'},",
      "        parentPath: ${2:'/a/b'},",
      "        displayName: ${3:'My Content'},",
      "        contentType: ${4:app.name} + ${5:':myContentType'},",
      "        data: ${6:contentData}",
      "    });",
      "    log.info('Content created with id ' + result._id);",
      "} catch (e) {",
      "    if (e.code == 'contentAlreadyExists') {",
      "        log.error('There is already a content with that name',);",
      "    } else {",
      "        log.error('Unexpected error: ' + e.message);",
      "    }",
      "}"
    ]
  },
  "contentLib.createMedia(params)": {
    "description": "Creates a media content",
    "prefix": ["contentLib.createMedia(params)", "createMedia"],
    "body": [
      "/**",
      " * Creates a media.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#createmedia",
      "*/",
      "var result = contentLib.createMedia({",
      "    name: ${1:'mycontent'},",
      "    parentPath: ${2:'/a/b'},",
      "    mimeType: ${3:'text/plain'},",
      "    data: ${4:dataStream}",
      "});"
    ]
  },
  "contentLib.delete(params)": {
    "description": "This function deletes a content",
    "prefix": ["contentLib.delete(params)", "delete"],
    "body": [
      "/**",
      " * Deletes a content by path",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#delete",
      "*/",
      "var result = contentLib.delete({",
      "    key: ${1:'/features/js-libraries/mycontent'}",
      "});"
    ]
  },
  "contentLib.exists(params)": {
    "description": "This function checks if a content exists for the current context",
    "prefix": ["contentLib.exists(params)", "exists"],
    "body": [
      "/**",
      " * Checking if a content exists",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#exists",
      " */",
      "var result = contentLib.exists({",
      "    key: ${1:'/path/to/mycontent'}",
      "});"
    ]
  },
  "contentLib.get(params)": {
    "description": "This function fetches a content",
    "prefix": ["contentLib.get(params)", "get"],
    "body": [
      "/**",
      " * Gets a single content by path.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#get",
      " */",
      "var result = contentLib.get({",
      "    key: ${1:'/path/to/mycontent'}",
      "});"
    ]
  },
  "contentLib.getAttachments(key)": {
    "description": "This function returns a content attachments",
    "prefix": ["contentLib.getAttachments(key)"],
    "body": [
      "/**",
      " * Gets all attachments for a content.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#getattachments",
      " */",
      "var result = contentLib.getAttachments(${1:'/features/js-libraries/mycontent'});"
    ]
  },
  "contentLib.getAttachmentStream(params)": {
    "description": "This function returns a data-stream for the specified content attachment",
    "prefix": ["contentLib.getAttachmentStream(params)", "getAttachmentStream"],
    "body": [
      "/**",
      " * Get stream for attachment.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#getattachmentstream  ",
      " */",
      "var stream = contentLib.getAttachmentStream({",
      "    key: ${1:'/a/b/mycontent'},",
      "    name: ${2:'document.pdf'}",
      "});"
    ]
  },
  "contentLib.getChildren(params)": {
    "description": "This function fetches children of a content",
    "prefix": ["contentLib.getChildren(params)", "getChildren"],
    "body": [
      "/**",
      " * Returns the children of specified path.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#getchildren",
      " */",
      "var result = contentLib.getChildren({",
      "    key: ${1:'/path/to'},",
      "    start: ${2:0},",
      "    count: ${3:10},",
      "    sort: ${4:'_modifiedTime ASC'}",
      "});"
    ]
  },
  "contentLib.getPermissions(params)": {
    "description": "Gets permissions on a content",
    "prefix": ["contentLib.getPermissions(params)", "getPermissions"],
    "body": [
      "/**",
      " * Return permissions for content by path.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#getpermissions",
      " */",
      "var result = contentLib.getPermissions({",
      "    key: ${1:'/features/js-libraries/mycontent'}",
      "});"
    ]
  },
  "contentLib.getSite(params)": {
    "description": "This function returns the parent site of a content",
    "prefix": ["contentLib.getSite(params)", "getSite"],
    "body": [
      "/**",
      " * Returns content's parent site",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#getsite",
      " */",
      "var result = contentLib.getSite({",
      "    key: ${1:'/path/to/mycontent'}",
      "});"
    ]
  },
  "contentLib.getSiteConfig": {
    "description": "This function returns the site configuration for this app in the parent site of a content",
    "prefix": ["contentLib.getSiteConfig(params)", "getSiteConfig"],
    "body": [
      "/**",
      " * Returns config of the content's parent site",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#getsiteconfig",
      " */",
      "var result = contentLib.getSiteConfig({",
      "    key: ${1:'/path/to/mycontent'},",
      "    applicationKey: ${2:app.name}",
      "});"
    ]
  },
  "contentLib.getType(name)": {
    "description": "Returns the properties and icon of the specified content type",
    "prefix": ["contentLib.getType(name)", "getType"],
    "body": [
      "/**",
      " * Get a content type by name.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#gettype",
      " */",
      "var contentType = contentLib.getType(${1:app.name} + ${2:':type'});"
    ]
  },
  "contentLib.getTypes()": {
    "description": "Returns the list of all the content types currently registered in the system",
    "prefix": ["contentLib.getTypes()", "getTypes"],
    "body": [
      "/**",
      " * Gets the list of all content types in the system.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#gettypes ",
      " */",
      "var contentTypes = contentLib.getTypes();"
    ]
  },
  "contentLib.modify(params)": {
    "description": "This function modifies a content",
    "prefix": ["contentLib.modify(params)", "modify"],
    "body": [
      "/**",
      " * Modify content by path.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#modify",
      " */",
      "var result = contentLib.modify({",
      "    key: ${1:'/a/b/mycontent'},",
      "    editor: function (${2:content}) {",
      "        ${2}.displayName = ${3:'Modified'};",
      "        ${2}.data.${4:property} = ${6:'New Property Value'};",
      "        ${2}.x[${7:app.name}].${8:xDataProp} = ${9:'New xDataProp Value'};",
      "        return ${2};",
      "    }}",
      "});"
    ]
  },
  "contentLib.rename(params)": {
    "description": "Rename a content",
    "prefix": ["contentLib.rename(params)", "rename"],
    "body": [
      "/**",
      " * Rename content by path. Keeps same parent.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
      " */",
      "var content1 = contentLib.move({",
      "    source: ${1:content._path},",
      "    target: ${2:'new-name'}",
      "});"
    ]
  },
  "contentLib.moveByPath(params)": {
    "description": "Move a content to a new path",
    "prefix": ["contentLib.moveByPath(params)", "moveByPath"],
    "body": [
      "/**",
      " * Move content by path. New parent path, keeps same name.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
      " */",
      "var content1 = contentLib.move({",
      "    source: ${1:content._path},",
      "    target: ${2:'/my-site/folder/'}",
      "});"
    ]
  },
  "contentLib.moveById(params)": {
    "description": "Move a content to a new path",
    "prefix": ["contentLib.moveById(params)", "moveById"],
    "body": [
      "/**",
      " * Move content by id to new path. New parent path, keeps same name.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
      " */",
      "var content1 = contentLib.move({",
      "    source: ${1:content._id},",
      "    target: '/my-site/folder/'",
      "});"
    ]
  },
  "contentLib.moveAndRename(params)": {
    "description": "Move a content to a new path",
    "prefix": ["contentLib.moveAndRename(params)", "moveAndRename"],
    "body": [
      "/**",
      " * Move and rename content.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
      " */",
      "var content1 = contentLib.move({",
      "    source: ${1:content._path},",
      "    target: portalLib.getSite(${1})._path +  ${2:'/folder/new-name'}",
      "});"
    ]
  },
  "contentLib.moveWithHandler(params)": {
    "description": "Tries to move a content to a new path",
    "prefix": [
      "contentLib.moveWithHandler(params)",
      "moveWithHandler",
      "tryMove"
    ],
    "body": [
      "/**",
      " * Handle error if target already exists.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
      "*/",
      "try {",
      "    var content5 = contentLib.move({",
      "        source: ${1:content._path},",
      "        target: portalLib.getSite(${1})._path +  ${2:'/my-site/folder/existing-content'}",
      "    });",
      "",
      "} catch (e) {",
      "    if (e.code == 'contentAlreadyExists') {",
      "        log.error('There is already a content in the target specified');",
      "    } else {",
      "        log.error('Unexpected error: ' + e.message);",
      "    }",
      "}"
    ]
  },
  "contentLib.publish(params)": {
    "description": "This function publishes content to a branch",
    "prefix": ["contentLib.publish(params)", "publish"],
    "body": [
      "/**",
      " * Publish content by path or key",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#publish",
      " */",
      "var result = contentLib.publish({",
      "    keys: ${1:publishKeys},",
      "    sourceBranch: ${2:'draft'},",
      "    targetBranch: ${3:'master'},",
      "    schedule: ${4:scheduleObject}, // { from: new Date().toISOString(), to: '2018-01-01T13:37:00.000Z' }",
      "    includeDependencies: ${5:false}",
      "});",
      "",
      "if (result) {",
      "    log.info('Pushed ' + result.pushedContents.length + ' content.');",
      "    log.info('Deleted ' + result.deletedContents.length + ' content.');",
      "    log.info('Content that failed operation: ' + result.failedContents.length);",
      "} else {",
      "    log.info('Operation failed.');",
      "}"
    ]
  },
  "contentLib.query(params)": {
    "description": "This command queries content",
    "prefix": ["contentLib.query(params)", "query"],
    "body": [
      "/**",
      " * This command queries content",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#query",
      " */",
      "var result = contentLib.query({",
      "    start: ${1:0},",
      "    count: ${2:10},",
      "    sort: ${3:sortString},",
      "    query: ${4:queryString},",
      "    contentTypes: [",
      "        app.name + ${5:':house'}",
      "    ]",
      "});"
    ]
  },
  "contentLib.removeAttachment(params)": {
    "description": "Removes an attachment from an existing content",
    "prefix": ["contentLib.removeAttachment(params)", "removeAttachment"],
    "body": [
      "/**",
      " * Removes an attachment, by content path.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#removeattachment",
      " */",
      "contentLib.removeAttachment({",
      "    key: ${1:content._path},",
      "    name: ${2:'attachmentName'}",
      "});"
    ]
  },
  "contentLib.removeMultipleAttachment(params)": {
    "description": "Removes multiple attachments from an existing content",
    "prefix": [
      "contentLib.removeAttachment(params)",
      "removeMultipleAttachment"
    ],
    "body": [
      "/**",
      " *  Removes multiple attachments, by content id.",
      " *  https://developer.enonic.com/docs/xp/stable/api/lib-content#removeattachment",
      " */",
      "contentLib.removeAttachment({",
      "    key: ${1:content._id}, ",
      "    name: [${2:'document'}, ${3:'image'}]",
      "});"
    ]
  },
  "contentLib.setPermissions(params)": {
    "description": "Sets permissions on a content",
    "prefix": ["contentLib.setPermissions(params)", "setPermissions"],
    "body": [
      "/**",
      " * Set permissions for content by path.",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#setpermissions",
      " */",
      "var flag = contentLib.setPermissions({",
      "    key: ${1:content._path},",
      "    inheritPermissions: ${2:false},",
      "    overwriteChildPermissions: ${3:true},",
      "    permissions: [{",
      "        principal: ${4:'user:system:anonymous'},",
      "        allow: ${5:['READ']},",
      "        deny: ${6:['DELETE']}",
      "    }]",
      "});"
    ]
  },
  "contentLib.unpublish(params)": {
    "description": "xx",
    "prefix": ["contentLib.unpublish(params)", "unpublish"],
    "body": [
      "/**",
      " * Unpublish content by path or key",
      " * https://developer.enonic.com/docs/xp/stable/api/lib-content#unpublish",
      " */",
      "var result = contentLib.unpublish({",
      "    keys: ${1:unpublishKeys}",
      "});"
    ]
  }
}
