{
	"contentLib.addAttachment(params)": {
		"description": "Adds an attachment to an existing content",
		"prefix": [
			"contentLib.addAttachment(params)",
			"addAttachment",
		],
		"body": [
			"/*",
			" Adds an attachment.",
			" Ref: https://developer.enonic.com/docs/xp/stable/api/lib-content#addattachment",
			"*/",
			"contentLib.addAttachment({",
			"    key: '${1:/mySite/mycontent}',",
			"    name: '${2:image}',",
			"    mimeType: '${3:image/png}',",
			"    label: '${4:photo}',",
			"    data: ${5:dataStream}",
			"});"
		],
	},
	"contentLib.create(params)": {
		"description": "This function creates a content",
		"prefix": [
			"contentLib.create(params)",
			"create"
		],
		"body": [
			"/*",
			" Creates a content.",
			" https://developer.enonic.com/docs/xp/stable/api/lib-content#create",
			"*/",
			"var result1 = contentLib.create({",
			"    name: '${1:mycontent}',",
			"    parentPath: '${2:/a/b}',",
			"    displayName: '${3:My Content}',",
			"    contentType: '${4:test:myContentType}',",
			"    language: '${5:es}',",
			"    data: ${6:contentData},",
			"    x: ${7:contentXData},",
			"    attachments: ${8:attachments},",
			"    publish: ${9:publish}",
			"});"
		],
	},
	"contentLib.createWithHandler(params)": {
		"description": "This function creates a content",
		"prefix": [
			"contentLib.createWithHandler(params)",
			"createWithHandler"
		],
		"body": [
			"/**",
			" * Check if content already exists.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#create",
			" */ ",
			"try {",
			"    var result2 = contentLib.create({",
			"        name: 'mycontent',",
			"        parentPath: '/a/b',",
			"        displayName: 'My Content',",
			"        contentType: 'test:myContentType',",
			"        data: {}",
			"    });",
			"    log.info('Content created with id ' + result2._id);",
			"} catch (e) {",
			"    if (e.code == 'contentAlreadyExists') {",
			"        log.error('There is already a content with that name'",);
"    } else {",
			"        log.error('Unexpected error: ' + e.message);",
			"    }",
			"}"
		],
	},
	"contentLib.createMedia(params)": {
		"description": "Creates a media content",
		"prefix": [
			"contentLib.createMedia(params)",
			"createMedia"
		],
		"body": [
			"/**",
			" * Creates a media.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#createmedia",
			"*/",
			"var result = contentLib.createMedia({",
			"    name: 'mycontent',",
			"    parentPath: '/a/b',",
			"    mimeType: 'text/plain',",
			"    data: stream",
			"});",
		]
	},
	"contentLib.delete(params)": {
		"description": "This function deletes a content",
		"prefix": [
			"contentLib.delete(params)",
			"delete"
		],
		"body": [
			"/**",
			" * Deletes a content by path",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#delete",
			"*/",
			"var result = contentLib.delete({",
			"    key: '/features/js-libraries/mycontent'",
			"});",
		]
	},
	"contentLib.exists(params)": {
		"description": "This function checks if a content exists for the current context",
		"prefix": [
			"contentLib.exists(params)",
			"exists"
		],
		"body": [
			"/**",
			" * Checking if a content exists",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#exists",
			" */",
			"var result = contentLib.exists({",
			"    key: '/path/to/mycontent'",
			"});",
		]
	},
	"contentLib.get(params)": {
		"description": "This function fetches a content",
		"prefix": [
			"contentLib.get(params)",
			"get"
		],
		"body": [
			"/**",
			" * Gets a single content by path.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#get",
			" */",
			"var result = contentLib.get({",
			"    key: '/path/to/mycontent'",
			"});",
		]
	},
	"contentLib.getAttachments(key)": {
		"description": "This function returns a content attachments",
		"prefix": [
			"contentLib.getAttachments(key)"
		],
		"body": [
			"/**",
			" * Gets all attachments for a content.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getattachments",
			" */",
			"var result = contentLib.getAttachments('/features/js-libraries/mycontent');",
		]
	},
	"contentLib.getAttachmentStream(params)": {
		"description": "This function returns a data-stream for the specified content attachment",
		"prefix": [
			"contentLib.getAttachmentStream(params)",
			"getAttachmentStream"
		],
		"body": [
			"/**",
			" * Get stream for attachment.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getattachmentstream  ",
			" */",
			"var stream = contentLib.getAttachmentStream({",
			"    key: '/a/b/mycontent',",
			"    name: 'document.pdf'",
			"});",
		]
	},
	"contentLib.getChildren(params)": {
		"description": "This function fetches children of a content",
		"prefix": [
			"contentLib.getChildren(params)",
			"getChildren"
		],
		"body": [
			"/**",
			" * Returns the children of specified path.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getchildren",
			" */",
			"var result = contentLib.getChildren({",
			"    key: '/path/to',",
			"    start: 0,",
			"    count: 2,",
			"    sort: '_modifiedTime ASC'",
			"});",
		]
	},
	"contentLib.getPermissions(params)": {
		"description": "Gets permissions on a content",
		"prefix": [
			"contentLib.getPermissions(params)",
			"getPermissions"
		],
		"body": [
			"/**",
			" * Return permissions for content by path.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getpermissions",
			" */",
			"var result = contentLib.getPermissions({",
			"    key: '/features/js-libraries/mycontent'",
			"});",
		]
	},
	"contentLib.getSite(params)": {
		"description": "This function returns the parent site of a content",
		"prefix": [
			"contentLib.getSite(params)",
			"getSite"
		],
		"body": [
			"/**",
			" * Returns content's parent site",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getsite",
			" */",
			"var result = contentLib.getSite({",
			"    key: '/path/to/mycontent'",
			"});",
		]
	},
	"contentLib.getSiteConfig": {
		"description": "This function returns the site configuration for this app in the parent site of a content",
		"prefix": [
			"contentLib.getSiteConfig(params)"
		],
		"body": [
			"/**",
			" * Returns config of the content's parent site",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getsiteconfig",
			" */",
			"var result = contentLib.getSiteConfig({",
			"    key: '/path/to/mycontent',",
			"    applicationKey: app.name",
			"});",
		]
	},
	"contentLib.getType(name)": {
		"description": "Returns the properties and icon of the specified content type",
		"prefix": [
			"contentLib.getType(name)",
			"getType"
		],
		"body": [
			"/**",
			" * Get a content type by name.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#gettype",
			" */",
			"var contentType = contentLib.getType('com.enonic.myapp:person');",
		]
	},
	"contentLib.getTypes()": {
		"description": "Returns the list of all the content types currently registered in the system",
		"prefix": [
			"contentLib.getTypes()",
			"getTypes"
		],
		"body": [
			"/**",
			" * Gets the list of all content types in the system.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#gettypes ",
			" */",
			"var contentTypes = contentLib.getTypes();",
		]
	},
	"contentLib.modify(params)": {
		"description": "This function modifies a content",
		"prefix": [
			"contentLib.modify(params)",
			"modify"
		],
		"body": [
			"/**",
			" * Modify content by path.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#modify",
			" */",
			"var result = contentLib.modify({",
			"    key: '/a/b/mycontent',",
			"    editor: function (c) {",
			"        c.displayName = 'Modified';",
			"        c.data.property = 'New Property Value';",
			"        return c;",
			"    }",
			"});",
		]
	},
	"contentLib.rename(params)": {
		"description": "Rename a content",
		"prefix": [
			"contentLib.rename(params)",
			"rename"
		],
		"body": [
			"/**",
			" * Rename content by path. Keeps same parent.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
			" */",
			"var content1 = contentLib.move({",
			"    source: '/my-site/my-content-name',",
			"    target: 'new-name'",
			"});",
		]
	},
	"contentLib.moveByPath(params)": {
		"description": "Move a content to a new path",
		"prefix": [
			"contentLib.moveByPath(params)",
			"moveByPath"
		],
		"body": [
			"/**",
			" * Move content by path. New parent path, keeps same name.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
			" */",
			"var content1 = contentLib.move({",
			"    source: '/my-site/my-content-name',",
			"    target: '/my-site/folder/'",
			"});",
		]
	},
	"contentLib.moveById(params)": {
		"description": "Move a content to a new path",
		"prefix": [
			"contentLib.moveById(params)",
			"moveById"
		],
		"body": [
			"/**",
			" * Move content by id to new path. New parent path, keeps same name.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
			" */",
			"var content1 = contentLib.move({",
			"    source: '8d933461-ede7-4dd5-80da-cb7de0cd7bba',",
			"    target: '/my-site/folder/'",
			"});",
		]
	},
	"contentLib.moveAndRename(params)": {
		"description": "Move a content to a new path",
		"prefix": [
			"contentLib.moveAndRename(params)",
			"moveAndRename"
		],
		"body": [
			"/**",
			" * Move and rename content.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
			" */",
			"var content1 = contentLib.move({",
			"    source: '/my-site/my-content-name',",
			"    target: '/my-site/folder/new-name'",
			"});",
		]
	},
	"contentLib.moveWithHandler(params)": {
		"description": "Move a content to a new path",
		"prefix": [
			"contentLib.moveAndRename(params)",
			"moveAndRename"
		],
		"body": [
			"/**",
			" * Handle error if target already exists.",
			" * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
			"*/",
			"try {",
			"    var content5 = contentLib.move({",
			"        source: '/my-site/my-content-name',",
			"        target: '/my-site/folder/existing-content'",
			"    });",
			"",
			"} catch (e) {",
			"    if (e.code == 'contentAlreadyExists') {",
			"        log.error('There is already a content in the target specified');",
			"    } else {",
			"        log.error('Unexpected error: ' + e.message);",
			"    }",
			"}"
		]
	},
}