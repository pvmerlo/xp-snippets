{
	"contentLib.addAttachment(params)": {
	  "body": [
		"/*",
		" Adds an attachment.",
		" Ref: https://developer.enonic.com/docs/xp/stable/api/lib-content#addattachment",
		"*/",
		"contentLib.addAttachment({",
		"    key: ${1:'/mySite/mycontent'},",
		"    name: ${2:'image'},",
		"    mimeType: ${3:'image/png'},",
		"    label: ${4:'photo'},",
		"    data: ${5:dataStream}",
		"});"
	  ],
	  "description": "Adds an attachment to an existing content",
	  "prefix": ["contentLib.addAttachment(params)", "addAttachment"]
	},
	"contentLib.create(params)": {
	  "body": [
		"/*",
		" Creates a content.",
		" https://developer.enonic.com/docs/xp/stable/api/lib-content#create",
		"*/",
		"var result = contentLib.create({",
		"    name: '${1:mycontent}',",
		"    parentPath: ${2:'/a/b'},",
		"    displayName: ${3:'My Content'},",
		"    contentType: ${4:app.name} + ${5:':myContentType'},",
		"    language: ${6:'en'},",
		"    data: ${6:contentData},",
		"    x: ${7:contentXData},",
		"    attachments: ${8:attachments},",
		"    publish: ${9:publish}",
		"});"
	  ],
	  "description": "This function creates a content",
	  "prefix": ["contentLib.create(params)", "create"]
	},
	"contentLib.createMedia(params)": {
	  "body": [
		"/**",
		" * Creates a media.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#createmedia",
		"*/",
		"var result = contentLib.createMedia({",
		"    name: ${1:'mycontent'},",
		"    parentPath: ${2:'/a/b'},",
		"    mimeType: ${3:'text/plain'},",
		"    data: ${4:dataStream}",
		"});"
	  ],
	  "description": "Creates a media content",
	  "prefix": ["contentLib.createMedia(params)", "createMedia"]
	},
	"contentLib.createWithHandler(params)": {
	  "body": [
		"/**",
		" * Check if content already exists.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#create",
		" */ ",
		"try {",
		"    var result = contentLib.create({",
		"        name: ${1:'mycontent'},",
		"        parentPath: ${2:'/a/b'},",
		"        displayName: ${3:'My Content'},",
		"        contentType: ${4:app.name} + ${5:':myContentType'},",
		"        data: ${6:contentData}",
		"    });",
		"    log.info('Content created with id ' + result._id);",
		"} catch (e) {",
		"    if (e.code == 'contentAlreadyExists') {",
		"        log.error('There is already a content with that name',);",
		"    } else {",
		"        log.error('Unexpected error: ' + e.message);",
		"    }",
		"}"
	  ],
	  "description": "This function tries to creates a content",
	  "prefix": [
		"contentLib.createWithHandler(params)",
		"createWithHandler",
		"tryCreate"
	  ]
	},
	"contentLib.delete(params)": {
	  "body": [
		"/**",
		" * Deletes a content by path",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#delete",
		"*/",
		"var result = contentLib.delete({",
		"    key: ${1:'/features/js-libraries/mycontent'}",
		"});"
	  ],
	  "description": "This function deletes a content",
	  "prefix": ["contentLib.delete(params)", "delete"]
	},
	"contentLib.exists(params)": {
	  "body": [
		"/**",
		" * Checking if a content exists",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#exists",
		" */",
		"var result = contentLib.exists({",
		"    key: ${1:'/path/to/mycontent'}",
		"});"
	  ],
	  "description": "This function checks if a content exists for the current context",
	  "prefix": ["contentLib.exists(params)", "exists"]
	},
	"contentLib.get(params)": {
	  "body": [
		"/**",
		" * Gets a single content by path.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#get",
		" */",
		"var result = contentLib.get({",
		"    key: ${1:'/path/to/mycontent'}",
		"});"
	  ],
	  "description": "This function fetches a content",
	  "prefix": ["contentLib.get(params)", "get"]
	},
	"contentLib.getAttachmentStream(params)": {
	  "body": [
		"/**",
		" * Get stream for attachment.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getattachmentstream  ",
		" */",
		"var stream = contentLib.getAttachmentStream({",
		"    key: ${1:'/a/b/mycontent'},",
		"    name: ${2:'document.pdf'}",
		"});"
	  ],
	  "description": "This function returns a data-stream for the specified content attachment",
	  "prefix": ["contentLib.getAttachmentStream(params)", "getAttachmentStream"]
	},
	"contentLib.getAttachments(key)": {
	  "body": [
		"/**",
		" * Gets all attachments for a content.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getattachments",
		" */",
		"var result = contentLib.getAttachments(${1:'/features/js-libraries/mycontent'});"
	  ],
	  "description": "This function returns a content attachments",
	  "prefix": ["contentLib.getAttachments(key)"]
	},
	"contentLib.getChildren(params)": {
	  "body": [
		"/**",
		" * Returns the children of specified path.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getchildren",
		" */",
		"var result = contentLib.getChildren({",
		"    key: ${1:'/path/to'},",
		"    start: ${2:0},",
		"    count: ${3:10},",
		"    sort: ${4:'_modifiedTime ASC'}",
		"});"
	  ],
	  "description": "This function fetches children of a content",
	  "prefix": ["contentLib.getChildren(params)", "getChildren"]
	},
	"contentLib.getPermissions(params)": {
	  "body": [
		"/**",
		" * Return permissions for content by path.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getpermissions",
		" */",
		"var result = contentLib.getPermissions({",
		"    key: ${1:'/features/js-libraries/mycontent'}",
		"});"
	  ],
	  "description": "Gets permissions on a content",
	  "prefix": ["contentLib.getPermissions(params)", "getPermissions"]
	},
	"contentLib.getSite(params)": {
	  "body": [
		"/**",
		" * Returns content's parent site",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getsite",
		" */",
		"var result = contentLib.getSite({",
		"    key: ${1:'/path/to/mycontent'}",
		"});"
	  ],
	  "description": "This function returns the parent site of a content",
	  "prefix": ["contentLib.getSite(params)", "getSite"]
	},
	"contentLib.getSiteConfig": {
	  "body": [
		"/**",
		" * Returns config of the content's parent site",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#getsiteconfig",
		" */",
		"var result = contentLib.getSiteConfig({",
		"    key: ${1:'/path/to/mycontent'},",
		"    applicationKey: ${2:app.name}",
		"});"
	  ],
	  "description": "This function returns the site configuration for this app in the parent site of a content",
	  "prefix": ["contentLib.getSiteConfig(params)", "getSiteConfig"]
	},
	"contentLib.getType(name)": {
	  "body": [
		"/**",
		" * Get a content type by name.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#gettype",
		" */",
		"var contentType = contentLib.getType(${1:app.name} + ${2:':type'});"
	  ],
	  "description": "Returns the properties and icon of the specified content type",
	  "prefix": ["contentLib.getType(name)", "getType"]
	},
	"contentLib.getTypes()": {
	  "body": [
		"/**",
		" * Gets the list of all content types in the system.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#gettypes ",
		" */",
		"var contentTypes = contentLib.getTypes();"
	  ],
	  "description": "Returns the list of all the content types currently registered in the system",
	  "prefix": ["contentLib.getTypes()", "getTypes"]
	},
	"contentLib.modify(params)": {
	  "body": [
		"/**",
		" * Modify content by path.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#modify",
		" */",
		"var result = contentLib.modify({",
		"    key: ${1:'/a/b/mycontent'},",
		"    editor: function (${2:content}) {",
		"        ${2}.displayName = ${3:'Modified'};",
		"        ${2}.data.${4:property} = ${6:'New Property Value'};",
		"        ${2}.x[${7:app.name}].${8:xDataProp} = ${9:'New xDataProp Value'};",
		"        return ${2};",
		"    }}",
		"});"
	  ],
	  "description": "This function modifies a content",
	  "prefix": ["contentLib.modify(params)", "modify"]
	},
	"contentLib.moveAndRename(params)": {
	  "body": [
		"/**",
		" * Move and rename content.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
		" */",
		"var content1 = contentLib.move({",
		"    source: ${1:content._path},",
		"    target: portalLib.getSite(${1})._path +  ${2:'/folder/new-name'}",
		"});"
	  ],
	  "description": "Move a content to a new path",
	  "prefix": ["contentLib.moveAndRename(params)", "moveAndRename"]
	},
	"contentLib.moveById(params)": {
	  "body": [
		"/**",
		" * Move content by id to new path. New parent path, keeps same name.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
		" */",
		"var content1 = contentLib.move({",
		"    source: ${1:content._id},",
		"    target: '/my-site/folder/'",
		"});"
	  ],
	  "description": "Move a content to a new path",
	  "prefix": ["contentLib.moveById(params)", "moveById"]
	},
	"contentLib.moveByPath(params)": {
	  "body": [
		"/**",
		" * Move content by path. New parent path, keeps same name.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
		" */",
		"var content1 = contentLib.move({",
		"    source: ${1:content._path},",
		"    target: ${2:'/my-site/folder/'}",
		"});"
	  ],
	  "description": "Move a content to a new path",
	  "prefix": ["contentLib.moveByPath(params)", "moveByPath"]
	},
	"contentLib.moveWithHandler(params)": {
	  "body": [
		"/**",
		" * Handle error if target already exists.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
		"*/",
		"try {",
		"    var content5 = contentLib.move({",
		"        source: ${1:content._path},",
		"        target: portalLib.getSite(${1})._path +  ${2:'/my-site/folder/existing-content'}",
		"    });",
		"",
		"} catch (e) {",
		"    if (e.code == 'contentAlreadyExists') {",
		"        log.error('There is already a content in the target specified');",
		"    } else {",
		"        log.error('Unexpected error: ' + e.message);",
		"    }",
		"}"
	  ],
	  "description": "Tries to move a content to a new path",
	  "prefix": [
		"contentLib.moveWithHandler(params)",
		"moveWithHandler",
		"tryMove"
	  ]
	},
	"contentLib.publish(params)": {
	  "body": [
		"/**",
		" * Publish content by path or key",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#publish",
		" */",
		"var result = contentLib.publish({",
		"    keys: ${1:publishKeys},",
		"    sourceBranch: ${2:'draft'},",
		"    targetBranch: ${3:'master'},",
		"    schedule: ${4:scheduleObject}, // { from: new Date().toISOString(), to: '2018-01-01T13:37:00.000Z' }",
		"    includeDependencies: ${5:false}",
		"});",
		"",
		"if (result) {",
		"    log.info('Pushed ' + result.pushedContents.length + ' content.');",
		"    log.info('Deleted ' + result.deletedContents.length + ' content.');",
		"    log.info('Content that failed operation: ' + result.failedContents.length);",
		"} else {",
		"    log.info('Operation failed.');",
		"}"
	  ],
	  "description": "This function publishes content to a branch",
	  "prefix": ["contentLib.publish(params)", "publish"]
	},
	"contentLib.query(params)": {
	  "body": [
		"/**",
		" * This command queries content",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#query",
		" */",
		"var result = contentLib.query({",
		"    start: ${1:0},",
		"    count: ${2:10},",
		"    sort: ${3:sortString},",
		"    query: ${4:queryString},",
		"    contentTypes: [",
		"        app.name + ${5:':house'}",
		"    ]",
		"});"
	  ],
	  "description": "This command queries content",
	  "prefix": ["contentLib.query(params)", "query"]
	},
	"contentLib.removeAttachment(params)": {
	  "body": [
		"/**",
		" * Removes an attachment, by content path.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#removeattachment",
		" */",
		"contentLib.removeAttachment({",
		"    key: ${1:content._path},",
		"    name: ${2:'attachmentName'}",
		"});"
	  ],
	  "description": "Removes an attachment from an existing content",
	  "prefix": ["contentLib.removeAttachment(params)", "removeAttachment"]
	},
	"contentLib.removeMultipleAttachment(params)": {
	  "body": [
		"/**",
		" *  Removes multiple attachments, by content id.",
		" *  https://developer.enonic.com/docs/xp/stable/api/lib-content#removeattachment",
		" */",
		"contentLib.removeAttachment({",
		"    key: ${1:content._id}, ",
		"    name: [${2:'document'}, ${3:'image'}]",
		"});"
	  ],
	  "description": "Removes multiple attachments from an existing content",
	  "prefix": [
		"contentLib.removeAttachment(params)",
		"removeMultipleAttachment"
	  ]
	},
	"contentLib.rename(params)": {
	  "body": [
		"/**",
		" * Rename content by path. Keeps same parent.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#move",
		" */",
		"var content1 = contentLib.move({",
		"    source: ${1:content._path},",
		"    target: ${2:'new-name'}",
		"});"
	  ],
	  "description": "Rename a content",
	  "prefix": ["contentLib.rename(params)", "rename"]
	},
	"contentLib.setPermissions(params)": {
	  "body": [
		"/**",
		" * Set permissions for content by path.",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#setpermissions",
		" */",
		"var flag = contentLib.setPermissions({",
		"    key: ${1:content._path},",
		"    inheritPermissions: ${2:false},",
		"    overwriteChildPermissions: ${3:true},",
		"    permissions: [{",
		"        principal: ${4:'user:system:anonymous'},",
		"        allow: ${5:['READ']},",
		"        deny: ${6:['DELETE']}",
		"    }]",
		"});"
	  ],
	  "description": "Sets permissions on a content",
	  "prefix": ["contentLib.setPermissions(params)", "setPermissions"]
	},
	"contentLib.unpublish(params)": {
	  "body": [
		"/**",
		" * Unpublish content by path or key",
		" * https://developer.enonic.com/docs/xp/stable/api/lib-content#unpublish",
		" */",
		"var result = contentLib.unpublish({",
		"    keys: ${1:unpublishKeys}",
		"});"
	  ],
	  "description": "xx",
	  "prefix": ["contentLib.unpublish(params)", "unpublish"]
	}
  }
  